// <auto-generated />
using System;
using Iconnexz.Authentication;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Iconnexz.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Iconnexz.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Iconnexz.Models.AccountInfoModel", b =>
                {
                    b.Property<int>("AccountInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IsPublished")
                        .HasColumnType("text");

                    b.Property<string>("PersonInChargeName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("VendorEmail")
                        .HasColumnType("text");

                    b.HasKey("AccountInfoId");

                    b.ToTable("AccountInfo", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.BalanceModel", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("BalanceId");

                    b.ToTable("Balance", "Wallet");
                });

            modelBuilder.Entity("Iconnexz.Models.BankInformationModel", b =>
                {
                    b.Property<int>("BankInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished")
                        .HasColumnType("text");

                    b.HasKey("BankInformationId");

                    b.ToTable("BankInformation", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.BusinessInfoModel", b =>
                {
                    b.Property<int>("BusinessInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BusinessFinishTime")
                        .HasColumnType("text");

                    b.Property<string>("BusinessLatitude")
                        .HasColumnType("text");

                    b.Property<string>("BusinessLongitude")
                        .HasColumnType("text");

                    b.Property<string>("BusinessStartTime")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CompanyDescription")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Friday")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished2")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished3")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished4")
                        .HasColumnType("text");

                    b.Property<string>("Monday")
                        .HasColumnType("text");

                    b.Property<string>("PersonInChargeName")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("Saturday")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Sunday")
                        .HasColumnType("text");

                    b.Property<string>("Thursday")
                        .HasColumnType("text");

                    b.Property<string>("Tuesday")
                        .HasColumnType("text");

                    b.Property<string>("VendorAddress")
                        .HasColumnType("text");

                    b.Property<string>("VendorEmail")
                        .HasColumnType("text");

                    b.Property<string>("Wednesday")
                        .HasColumnType("text");

                    b.HasKey("BusinessInfoId");

                    b.ToTable("BusinessInfo", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.CampaignModel", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CampaignName")
                        .HasColumnType("text");

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaign", "Campaign");
                });

            modelBuilder.Entity("Iconnexz.Models.CardsModel", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CVV")
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .HasColumnType("text");

                    b.Property<string>("Expiry")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.Property<string>("VirtualCardNumber")
                        .HasColumnType("text");

                    b.HasKey("CardId");

                    b.ToTable("Cards", "Wallet");
                });

            modelBuilder.Entity("Iconnexz.Models.ContactModel", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SelectDepartment")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("ContactId");

                    b.ToTable("Contact", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.ContactQModel", b =>
                {
                    b.Property<int>("ContactQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("C1")
                        .HasColumnType("text");

                    b.Property<string>("C2")
                        .HasColumnType("text");

                    b.Property<string>("C3")
                        .HasColumnType("text");

                    b.Property<string>("C4")
                        .HasColumnType("text");

                    b.Property<string>("Q1")
                        .HasColumnType("text");

                    b.Property<string>("Q2")
                        .HasColumnType("text");

                    b.Property<string>("Q3")
                        .HasColumnType("text");

                    b.Property<string>("Q4")
                        .HasColumnType("text");

                    b.HasKey("ContactQId");

                    b.ToTable("ContactQ", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.FaqModel", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content1")
                        .HasColumnType("text");

                    b.Property<string>("Content2")
                        .HasColumnType("text");

                    b.Property<string>("Content3")
                        .HasColumnType("text");

                    b.Property<string>("Content4")
                        .HasColumnType("text");

                    b.Property<string>("Content5")
                        .HasColumnType("text");

                    b.Property<string>("Content6")
                        .HasColumnType("text");

                    b.Property<string>("Question1")
                        .HasColumnType("text");

                    b.Property<string>("Question2")
                        .HasColumnType("text");

                    b.Property<string>("Question3")
                        .HasColumnType("text");

                    b.Property<string>("Question4")
                        .HasColumnType("text");

                    b.Property<string>("Question5")
                        .HasColumnType("text");

                    b.Property<string>("Question6")
                        .HasColumnType("text");

                    b.HasKey("FaqId");

                    b.ToTable("Faq", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.ImageModel", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ImageId");

                    b.ToTable("Images", "Image");
                });

            modelBuilder.Entity("Iconnexz.Models.LoginModel", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Login", "Login");
                });

            modelBuilder.Entity("Iconnexz.Models.OrdersModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Customer")
                        .HasColumnType("text");

                    b.Property<string>("EndDate")
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("text");

                    b.Property<string>("OrderTotal")
                        .HasColumnType("text");

                    b.Property<string>("StartDate")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("OrderId");

                    b.ToTable("Orders", "Orders");
                });

            modelBuilder.Entity("Iconnexz.Models.ServiceImageModel", b =>
                {
                    b.Property<int>("ServiceImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ServiceImage")
                        .HasColumnType("bytea");

                    b.Property<string>("ServiceImageFilePath")
                        .HasColumnType("text");

                    b.Property<byte[]>("ThumbnailImage")
                        .HasColumnType("bytea");

                    b.Property<string>("ThumbnailImageFilePath")
                        .HasColumnType("text");

                    b.HasKey("ServiceImageId");

                    b.ToTable("ServiceImage", "ManageService");
                });

            modelBuilder.Entity("Iconnexz.Models.ServiceInformationModel", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("IsPublished")
                        .HasColumnType("text");

                    b.Property<string>("SSU")
                        .HasColumnType("text");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<string>("ServicePrice")
                        .HasColumnType("text");

                    b.Property<string>("ServiceSpecialPrice")
                        .HasColumnType("text");

                    b.Property<string>("SpecialPriceEnd")
                        .HasColumnType("text");

                    b.Property<string>("SpecialPriceStart")
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("TaxType")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("ServiceId");

                    b.ToTable("ServiceInformation", "ManageService");
                });

            modelBuilder.Entity("Iconnexz.Models.ServiceMappingModel", b =>
                {
                    b.Property<int>("MappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Mapping")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("MappingId");

                    b.ToTable("ServiceMapping", "ManageService");
                });

            modelBuilder.Entity("Iconnexz.Models.ServiceVariationsModel", b =>
                {
                    b.Property<int>("VariationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Control")
                        .HasColumnType("text");

                    b.Property<string>("VariationName")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("VariationsId");

                    b.ToTable("ServiceVariation", "ManageService");
                });

            modelBuilder.Entity("Iconnexz.Models.SuggestModel", b =>
                {
                    b.Property<int>("SuggestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<int>("HPNumber")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerName")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<int>("TelNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.HasKey("SuggestId");

                    b.ToTable("Suggest", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.TransactionsModel", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions", "Wallet");
                });

            modelBuilder.Entity("Iconnexz.Models.UserIndividualModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserIndividual", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.UserNavbarModel", b =>
                {
                    b.Property<int>("NavbarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("uItem1")
                        .HasColumnType("text");

                    b.Property<string>("uItem2")
                        .HasColumnType("text");

                    b.Property<string>("uItem3")
                        .HasColumnType("text");

                    b.Property<string>("uItem4")
                        .HasColumnType("text");

                    b.Property<string>("uItem5")
                        .HasColumnType("text");

                    b.Property<string>("uItem6")
                        .HasColumnType("text");

                    b.Property<string>("uItem7")
                        .HasColumnType("text");

                    b.HasKey("NavbarId");

                    b.ToTable("UserNavbar", "Navbar");
                });

            modelBuilder.Entity("Iconnexz.Models.UserOrganizationModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<int>("CompanyRocNumber")
                        .HasColumnType("integer");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PostalCode")
                        .HasColumnType("integer");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserOrganization", "UserCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.VendorAccountImageModel", b =>
                {
                    b.Property<int>("VendorAccountImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ThumbnailImage")
                        .HasColumnType("bytea");

                    b.Property<string>("ThumbnailImageFilePath")
                        .HasColumnType("text");

                    b.Property<byte[]>("VendorAccountImage")
                        .HasColumnType("bytea");

                    b.Property<string>("VendorAccountImageFilePath")
                        .HasColumnType("text");

                    b.HasKey("VendorAccountImageId");

                    b.ToTable("VendorAccountImage", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.VendorAddressModel", b =>
                {
                    b.Property<int>("VendorAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessLatitude")
                        .HasColumnType("text");

                    b.Property<string>("BusinessLongitude")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("IsPublished")
                        .HasColumnType("text");

                    b.Property<string>("PostCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("VendorAddress")
                        .HasColumnType("text");

                    b.HasKey("VendorAddressId");

                    b.ToTable("VendorAddress", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.VendorRegImageModel", b =>
                {
                    b.Property<int>("VendorRegImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte[]>("ThumbnailImage")
                        .HasColumnType("bytea");

                    b.Property<string>("ThumbnailImageFilePath")
                        .HasColumnType("text");

                    b.Property<byte[]>("VendorRegImage")
                        .HasColumnType("bytea");

                    b.Property<string>("VendorRegImageFilePath")
                        .HasColumnType("text");

                    b.HasKey("VendorRegImageId");

                    b.ToTable("VendorRegImage", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.VendorRegModel", b =>
                {
                    b.Property<int>("VendorRegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BusinessCategory")
                        .HasColumnType("text");

                    b.Property<string>("BusinessType")
                        .HasColumnType("text");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber2")
                        .HasColumnType("text");

                    b.Property<string>("CountryCategory")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("EndBusinessHours")
                        .HasColumnType("text");

                    b.Property<string>("FridayCheck")
                        .HasColumnType("text");

                    b.Property<int>("IntroducerCode")
                        .HasColumnType("integer");

                    b.Property<string>("MondayCheck")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.Property<int>("RegisterOfCompanyNo")
                        .HasColumnType("integer");

                    b.Property<string>("RestaurantCategory")
                        .HasColumnType("text");

                    b.Property<string>("SaturdayCheck")
                        .HasColumnType("text");

                    b.Property<string>("ServiceCategory")
                        .HasColumnType("text");

                    b.Property<string>("StartBusinessHours")
                        .HasColumnType("text");

                    b.Property<string>("SundayCheck")
                        .HasColumnType("text");

                    b.Property<string>("ThursdayCheck")
                        .HasColumnType("text");

                    b.Property<string>("TuesdayCheck")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfBusiness")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfFood")
                        .HasColumnType("text");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.Property<int>("VerificationCode")
                        .HasColumnType("integer");

                    b.Property<int>("VerificationCode2")
                        .HasColumnType("integer");

                    b.Property<string>("WednesdayCheck")
                        .HasColumnType("text");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("bankAccountNo")
                        .HasColumnType("text");

                    b.Property<string>("bankName")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("companyDescription")
                        .HasColumnType("text");

                    b.Property<string>("contactNumber")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("emailAddress")
                        .HasColumnType("text");

                    b.Property<string>("everyAdditional")
                        .HasColumnType("text");

                    b.Property<string>("flatRate")
                        .HasColumnType("text");

                    b.Property<string>("forFirst")
                        .HasColumnType("text");

                    b.Property<string>("personInChargeName")
                        .HasColumnType("text");

                    b.Property<string>("shopLatitude")
                        .HasColumnType("text");

                    b.Property<string>("shopLongitude")
                        .HasColumnType("text");

                    b.Property<string>("state")
                        .HasColumnType("text");

                    b.HasKey("VendorRegId");

                    b.ToTable("VendorReg", "VendorCMS");
                });

            modelBuilder.Entity("Iconnexz.Models.VendorSidebarModel", b =>
                {
                    b.Property<int>("SidebarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Item1")
                        .HasColumnType("text");

                    b.Property<string>("Item2")
                        .HasColumnType("text");

                    b.Property<string>("Item3")
                        .HasColumnType("text");

                    b.Property<string>("Item4")
                        .HasColumnType("text");

                    b.Property<string>("Item5")
                        .HasColumnType("text");

                    b.Property<string>("Item6")
                        .HasColumnType("text");

                    b.Property<string>("Item7")
                        .HasColumnType("text");

                    b.Property<string>("Item8")
                        .HasColumnType("text");

                    b.HasKey("SidebarId");

                    b.ToTable("VendorSidebar", "Navbar");
                });

            modelBuilder.Entity("Iconnexz.Models.WalletModel", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .HasColumnType("text");

                    b.Property<string>("VirtualCardNumber")
                        .HasColumnType("text");

                    b.HasKey("WalletId");

                    b.ToTable("Wallet", "Wallet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Iconnexz.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Iconnexz.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Iconnexz.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Iconnexz.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
